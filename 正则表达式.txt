1.匹配字面文本
	1.任何不包含如下字符的正则表达式都可以简单的匹配其自身：$()*+.?[\^{|。
	2.匹配12个特殊字符，前面+\
	3.(?i)后面的不区分大小写，而(?-i)后面的字符重新区分大小写 例如 sensitive(?i)case(?-i)case2
2.匹配不可打印字符
	1.匹配一个包含ASCII控制字符的字符串：回车、换行等，使用专门的转义序列，如回车\r，换行\n
	2.一个小写的\x后跟两个大写十六进制数字可以匹配ASCII字符集中的一个字符
3.匹配多个字符之一
	1.字符组匹配在一个可能的字符列表中的单个字符
	2.在一个字符组中，只有4个字符拥有特殊功能：\,^,-,]，虽然只在特殊位置起作用，但推荐始终进行转义
	3.除4个字符外的所有其他字符都不需要进行转义
	4.紧跟左括号是一个^的话，排除整个字符组，匹配该字符组以外的任意字符
	5.-会创建一个范围，如[a-fA-F0-9]匹配一个十六进制字符
	6.简写：
		1.\d和[\d]都会匹配单个数字，\D和[^\d]则会匹配不是数字的任意字符
		2.\w匹配单个的单词字符（字母、数字、下划线），同理\W
		3.\s匹配空白字符（空格制表换行），同理\S
4.匹配任意字符：
	1.点号匹配除了换行符之外的任意字符（匹配选项关闭），若打开点号匹配换行符选项，则可以，(?s)'.'
	2.另一种解决方案：[\s\S]
5.匹配文本行起始和文本行结尾
	1.目标文件
		1.开始：\Aalpha，^alpha，^和$匹配换行处关闭
		2.结束：omega\Z，omega$，^和$匹配换行处关闭
	2.目标行
		1.开始：^begin，^和$匹配换行处打开，即(?m)^begin
		2.结束：omega$
	3.长度为0的匹配：
		1.定位符定位
		2.\A\Z匹配空串，以及包含单个换行符的字符串；\A\z则只会匹配空串
6.单行模式：点号匹配换行符；多行模式：^和$匹配换行符
7.匹配完整单词：
	1.单词边界
		1.在目标文本的第一个字符前，如果第一个字符是单词字符
		2.在目标文本的最后一个字符后，如果最后一个字符是一个单词字符
		3.在目标文本的两个字符之间，其中一个是非单词字符，而另一个是单词字符
	2.非单词边界：
		1.在目标文本的第一个字符前，如果第一个字符不是单词字符
		2.在目标文本的最后一个字符后，如果最后一个字符不是一个单词字符
		3.在两个单词字符之间	
		4.在两个非单词字符之间
		5.空串
8.匹配unicode：
	1.unicode码位：\u2122；码位范围：[\u1F00-\u1FFFF]
9.匹配多个选择分支之一：
	1.mary|jane|sue：匹配到第一个就停止
	2.\bjane\b|\bjanet\b会匹配到janet，而不是jane
10.分组和捕获匹配中的子串：
	1.\b(Mary|Jane|Sue)\b
	2.\b(\d\d\d\d)-(\d\d)-(\d\d)\b
	3.\b(?:Mary|Jane|Sue)\b  非捕获分组，不记录分组的内容
	4.sensitive(?i:sensitive)sensitive 带模式修饰符的分组
11.再次匹配先前匹配的文本
	1.\b\d\d(\d\d)-\1-\1\b匹配2008-08-08
	2.正则引擎从前向后处理，因此应当把捕获括号放到反向引用的前面
12.捕获和命名匹配字串
	1.\b(?<year>\d\d\d\d)-(?<month>\d\d)-(?<day>\d\d)\b 打标签
	2.\b\d\d(?P<magic>\d\d)-(?P=magic)-(?P=magic)\b
13.把正则表达式的一部分重复多次
	1.一个100位十进制数：\b\d{100}\b 固定数字重复
	2.一个32位的十六进制整数：\b[a-f0-9]{1,8} 可变次数重复
	3.带可选后缀的十六进制整数：\b[a-f0-9]{1,8}h?\b
	4.一个浮点数，包含可选的整数部分、必需的小数部分和可选的指数部分：\d*\.\d+(e\d+)?
	4.\d{1,}==\d+,匹配至少一个数字；\d{0,}==\d*匹配至少0个数字
	5.h?=h{0,1}
14.选择最小或最大重复次数
	1.贪心量词会找到最长可能的匹配
	2.懒惰量词会找到最短可能的匹配，即在两次后加？
15.消除不必要的回溯
	1.不支持python流派
	2.使用占用量词：\b\d++\b 匹配123abc 456匹配失败
	3.使用固化分组：\b(?>\d+)\b 
	4.占有量词和固化分组的区别是占有量词只应用于单个正则表达式记号，而固化分组可以把一个完整的正则表达式包起来，固化分组内部可回溯
16.避免失控重复：
	1.检查html标签是否完整，<html>(?>.*?<head>)(?>.*?</head>).*?</html>
17.测试一个匹配，但不添加到整体匹配中：
	1.my <b>cat</b> is furry找出cat，(?<=<b>)\w+(?=</b>)
	2.顺序环视(?=<)，逆序环视(?<=)
	3.否定型环视（?!<)，(?<!)
	4.不同层次的环视：(?<=one|two|three|forty-two|gr[ae]y)
	5.环视是固化分组：(?=(\d+))\w+\1 失败
	6.不使用逆序环视的解决方案：(<b>)(\w+)(?=</b>)
18.根据条件匹配两者之一：
	1.创建一个正则表达式，匹配一个由逗号分隔的单词列表one、two和three。每个单词可以在该列表中出现任意多次，但是每个单词必须至少出现一次：\b(?:(?:(one)|(two)|(three))(?:,|\b)){3,}
19.向正则表达式添加注释：
	1.\d{4}	#year
	  -	#separator
	  \d{2}	#month
	 -	#separator
	 \d{2}	#day
	2.(?#comment)表示注释
20.在替代文本中添加正则匹配：
	1.正则：http:\S+
	2.替代文本：<a hrep="\g<0>">\g<0></a>
21.把部分正则匹配到替代文本上(1234567890转成(123)456-7890)
	1.正则：\b(\d{3})(\d{3})(\d{4})\b
	2.替代文本：(\1)\2-\3
	3.使用命名捕获：
		1.\b(?P<area>\d{3})(?P<exchange>\d{3})(?P<number>\d{4})\b
		2.(\g<area>)\g<exchange>-\g<number>